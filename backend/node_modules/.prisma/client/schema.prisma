generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  address_id     String      @id @db.Uuid
  address        String      @db.VarChar(200)
  kecamatan      String      @db.VarChar(40)
  kota           String      @db.VarChar(40)
  provinsi       String      @db.VarChar(40)
  kode_pos       String      @db.VarChar(40)
  kyc_level_1_id String      @unique @db.Uuid
  kyc_level_1    kyc_level_1 @relation(fields: [kyc_level_1_id], references: [kyc_level_1_id], onDelete: NoAction, onUpdate: NoAction)
}

model alamat_usaha {
  alamat_usaha_id String   @id @db.Uuid
  campaign_id     String   @unique @db.Uuid
  address         String?  @db.VarChar(512)
  kecamatan       String?  @db.VarChar(40)
  kota            String?  @db.VarChar(40)
  provinsi        String?  @db.VarChar(40)
  kode_pos        String?  @db.VarChar(12)
  lat             Decimal? @db.Decimal(15, 12)
  lgn             Decimal? @db.Decimal(15, 12)
  campaign        campaign @relation(fields: [campaign_id], references: [campaign_id], onDelete: NoAction, onUpdate: NoAction)
}

model campaign {
  campaign_id        String              @id @db.Uuid
  user_id            String              @db.Uuid
  nama_usaha         String              @db.VarChar(200)
  deskripsi_usaha    String              @db.VarChar(512)
  logo               Bytes?
  isApproved         Boolean             @default(false)
  isPublished        Boolean             @default(false)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime?           @default(now()) @db.Timestamptz(6)
  tipe_usaha         tipe_usaha_enum?
  jenis_usaha        jenis_usaha_enum?
  alamat_usaha       alamat_usaha?
  user               user                @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  campaign_update    campaign_update[]
  contact_usaha      contact_usaha?
  crowdfunding       crowdfunding?
  discussion         discussion[]
  document           document?
  investment         investment[]
  legalitas_usaha    legalitas_usaha?
  pesan_campaign     pesan_campaign[]
  social_media_usaha social_media_usaha?
  team_campaign      team_campaign[]
  transaction        transaction[]
}

model campaign_update {
  update_id     String   @id @db.Uuid
  campaign_id   String   @db.Uuid
  update_title  String?  @db.VarChar(256)
  update_detail String?
  published_at  DateTime @default(now()) @db.Timestamptz(6)
  campaign      campaign @relation(fields: [campaign_id], references: [campaign_id], onDelete: NoAction, onUpdate: NoAction)
}

model community {
  community_id         String                @id @db.Uuid
  campaign_id          String                @db.Uuid
  community_membership community_membership?
  community_proposal   community_proposal[]
}

model community_chat {
  chat_id               String             @id @db.Uuid
  community_proposal_id String             @db.Uuid
  chat                  String
  user_id               String             @db.Uuid
  created_at            DateTime           @default(now()) @db.Timestamptz(6)
  community_proposal    community_proposal @relation(fields: [community_proposal_id], references: [proposal_com_id], onDelete: NoAction, onUpdate: NoAction)
  user                  user               @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model community_membership {
  community_membership_id String    @id @db.Uuid
  community_id            String    @unique @db.Uuid
  user_id                 String    @db.Uuid
  joinedDate              DateTime  @default(now()) @db.Timestamptz(6)
  exited_date             DateTime? @db.Timestamptz(6)
  community               community @relation(fields: [community_id], references: [community_id], onDelete: NoAction, onUpdate: NoAction)
  user                    user      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model community_proposal {
  proposal_com_id String           @id @db.Uuid
  setuju          Int              @default(0)
  tidak_setuju    Int              @default(0)
  abstain         Int              @default(0)
  title           String           @db.VarChar(200)
  deskripsi       String?
  file_tambahan   Bytes?
  amount          BigInt           @default(0)
  community_id    String           @db.Uuid
  community_chat  community_chat[]
  community       community        @relation(fields: [community_id], references: [community_id], onDelete: NoAction, onUpdate: NoAction)
  user_voted      user_voted[]
}

model contact_usaha {
  contact_id  String   @id @db.Uuid
  campaign_id String   @unique @db.Uuid
  telepon_wa  String?  @db.VarChar(24)
  fax         String?  @db.VarChar(24)
  email       String?  @db.VarChar(64)
  website     String?  @db.VarChar(64)
  campaign    campaign @relation(fields: [campaign_id], references: [campaign_id], onDelete: NoAction, onUpdate: NoAction)
}

model crowdfunding {
  crowdfunding_id     String               @id @db.Uuid
  campaign_id         String               @unique @db.Uuid
  target_raise        BigInt?
  equity_dijual       Decimal?             @db.Decimal
  start_date          DateTime?            @db.Timestamptz(6)
  end_date            DateTime?            @db.Timestamptz(6)
  fund_raised         BigInt               @default(0)
  campaign            campaign             @relation(fields: [campaign_id], references: [campaign_id], onDelete: NoAction, onUpdate: NoAction)
  data_rekening       data_rekening?
  highlight_product   highlight_product?
  product_information product_information?
}

model data_rekening {
  rekening_id     String       @id @db.Uuid
  nama_rekening   String?      @db.VarChar(200)
  nama_bank       String?      @db.VarChar(200)
  nomor_rekening  String?      @db.VarChar(200)
  crowdfunding_id String       @unique @db.Uuid
  crowdfunding    crowdfunding @relation(fields: [crowdfunding_id], references: [crowdfunding_id], onDelete: NoAction, onUpdate: NoAction)
}

model discussion {
  discussion_id      String               @id @db.Uuid
  campaign_id        String               @db.Uuid
  user_id            String               @db.Uuid
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  lastActivity       DateTime?            @default(now()) @db.Timestamptz(6)
  message            String
  like               Int?                 @default(0)
  campaign           campaign             @relation(fields: [campaign_id], references: [campaign_id], onDelete: NoAction, onUpdate: NoAction)
  user               user                 @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  replies_discussion replies_discussion[]
}

model document {
  document_id       String              @id @db.Uuid
  campaign_id       String              @unique @db.Uuid
  campaign          campaign            @relation(fields: [campaign_id], references: [campaign_id], onDelete: NoAction, onUpdate: NoAction)
  document_legal    document_legal[]
  document_proposal document_proposal[]
}

model document_legal {
  document_legal_id String   @id @db.Uuid
  document_id       String   @db.Uuid
  nama_dokumen      String?  @db.VarChar(200)
  file              Bytes?
  document          document @relation(fields: [document_id], references: [document_id], onDelete: NoAction, onUpdate: NoAction)
}

model document_proposal {
  document_proposal_id String   @id @db.Uuid
  document_id          String   @db.Uuid
  nama_dokumen         String?  @db.VarChar(200)
  file                 Bytes?
  document             document @relation(fields: [document_id], references: [document_id], onDelete: NoAction, onUpdate: NoAction)
}

model foto_dokumen {
  foto_dokumen_id   String      @id @db.Uuid
  foto_ktp_depan    Bytes
  foto_ktp_belakang Bytes
  foto_selfie       Bytes
  kyc_level_1_id    String      @unique @db.Uuid
  kyc_level_1       kyc_level_1 @relation(fields: [kyc_level_1_id], references: [kyc_level_1_id], onDelete: NoAction, onUpdate: NoAction)
}

model highlight_product {
  highlight_product_id Int          @id
  crowdfunding_id      String       @unique @db.Uuid
  highlight            String?
  crowdfunding         crowdfunding @relation(fields: [crowdfunding_id], references: [crowdfunding_id], onDelete: NoAction, onUpdate: NoAction)
}

model investment {
  investment_id   String   @id @db.Uuid
  campaign_id     String   @db.Uuid
  user_id         String   @db.Uuid
  amount          BigInt
  investment_date DateTime @default(now()) @db.Timestamptz(6)
  campaign        campaign @relation(fields: [campaign_id], references: [campaign_id], onDelete: NoAction, onUpdate: NoAction)
  user            user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model kyc_level_1 {
  kyc_level_1_id String          @id @db.Uuid
  user_id        String          @unique @db.Uuid
  full_name      String          @db.VarChar(200)
  nik            String          @db.VarChar(16)
  tanggal_lahir  DateTime        @db.Date
  status         kyc_status_enum @default(PENDING)
  isAproved      Boolean         @default(false)
  createdAt      DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?       @default(now()) @db.Timestamptz(6)
  statusUpdate   String?         @db.VarChar(256)
  address        address?
  foto_dokumen   foto_dokumen?
  user           user            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model kyc_level_2 {
  kyc_level_2_id        String          @id @db.Uuid
  user_id               String          @unique @db.Uuid
  surat_skck            Bytes
  surat_domisili        Bytes
  surat_keterangan_bank Bytes
  status                kyc_status_enum @default(PENDING)
  isApproved            Boolean         @default(false)
  createdAt             DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime?       @default(now()) @db.Timestamptz(6)
  updateStatus          String?         @db.VarChar(256)
  user                  user            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model legalitas_usaha {
  legalitas_id     String    @id @db.Uuid
  campaign_id      String    @unique @db.Uuid
  tanggal_dibentuk DateTime? @db.Date
  pemilik          String?   @db.VarChar(200)
  nib              String?   @db.VarChar(200)
  nik_pic          String?   @db.VarChar(20)
  file_perizinan   Bytes?
  campaign         campaign  @relation(fields: [campaign_id], references: [campaign_id], onDelete: NoAction, onUpdate: NoAction)
}

model pesan_campaign {
  pesan_id    String   @id @db.Uuid
  campaign_id String   @db.Uuid
  pesan       String
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  createdBy   String   @db.VarChar(200)
  campaign    campaign @relation(fields: [campaign_id], references: [campaign_id], onDelete: NoAction, onUpdate: NoAction)
}

model product_information {
  product_info_id Int          @id
  crowdfunding_id String       @unique @db.Uuid
  link_video      String?      @db.VarChar(200)
  product_info    String?
  crowdfunding    crowdfunding @relation(fields: [crowdfunding_id], references: [crowdfunding_id], onDelete: NoAction, onUpdate: NoAction)
}

model refund {
  refund_id       String    @id @db.Uuid
  amount          BigInt
  nama_bank       String?   @db.VarChar(200)
  nomor_bank      String?   @db.VarChar(200)
  alasan_refund   String?
  isAproved       Boolean?  @default(false)
  statusUpdate    String?
  updatedAt       DateTime  @default(now()) @db.Timestamptz(6)
  createdAt       DateTime? @default(now()) @db.Timestamptz(6)
  user_id         String    @db.Uuid
  isConfirmed     Boolean   @default(false)
  approved_amount BigInt?
  reason_reduce   String?
  user            user      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model replies_discussion {
  replie_id     String     @id @db.Uuid
  discussion_id String     @db.Uuid
  createdAt     DateTime   @default(now()) @db.Timestamptz(6)
  message       String
  like          Int?       @default(0)
  discussion    discussion @relation(fields: [discussion_id], references: [discussion_id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model social_media_usaha {
  social_media_id String         @id @db.Uuid
  campaign_id     String?        @unique @db.Uuid
  team_id         String?        @db.Uuid
  facebook        String?        @db.VarChar(200)
  instagram       String?        @db.VarChar(200)
  twitter         String?        @db.VarChar(200)
  telegram        String?        @db.VarChar(200)
  tiktok          String?        @db.VarChar(200)
  linkedin        String?        @db.VarChar(200)
  campaign        campaign?      @relation(fields: [campaign_id], references: [campaign_id], onDelete: NoAction, onUpdate: NoAction)
  team_campaign   team_campaign? @relation(fields: [team_id], references: [team_id], onDelete: NoAction, onUpdate: NoAction)
}

model team_campaign {
  team_id            String               @id @db.Uuid
  campaign_id        String               @db.Uuid
  nama_lengkap       String               @db.VarChar
  jabatan            String               @db.VarChar
  social_media_usaha social_media_usaha[]
  campaign           campaign             @relation(fields: [campaign_id], references: [campaign_id], onDelete: NoAction, onUpdate: NoAction)
}

model transaction {
  transaction_id     String                   @id @db.Uuid
  transaction_type   transaction_type_enum?
  transaction_status transaction_status_enum? @default(PENDING)
  trans_date         DateTime?                @default(now()) @db.Timestamptz(6)
  payment            String?                  @db.VarChar(200)
  amount             BigInt?
  campaign_id        String?                  @db.Uuid
  user_id            String?                  @db.Uuid
  campaign           campaign?                @relation(fields: [campaign_id], references: [campaign_id], onDelete: NoAction, onUpdate: NoAction)
  user               user?                    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  user_id              String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                String                 @unique @db.VarChar(200)
  phone                String?                @db.VarChar(20)
  password             String                 @db.VarChar(200)
  roles                user_roles             @default(USER)
  isPublic             Boolean                @default(true)
  createdAt            DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime?              @default(now()) @db.Timestamptz(6)
  username             String?                @db.VarChar(100)
  avatar               Bytes?
  isverified           Boolean?               @default(false)
  campaign             campaign[]
  community_chat       community_chat[]
  community_membership community_membership[]
  discussion           discussion[]
  investment           investment[]
  kyc_level_1          kyc_level_1?
  kyc_level_2          kyc_level_2?
  refund               refund[]
  transaction          transaction[]
  user_voted           user_voted[]
}

model user_voted {
  user_voted_id         String             @id @db.Uuid
  community_proposal_id String             @db.Uuid
  user_id               String             @db.Uuid
  community_proposal    community_proposal @relation(fields: [community_proposal_id], references: [proposal_com_id], onDelete: NoAction, onUpdate: NoAction)
  user                  user               @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

enum jenis_usaha_enum {
  PERTANIAN
  PERDAGANGAN
  JASA
  INDUSTRI
  MAKANAN
  MINUMAN
  TEKNOLOGI
  KREATIF
  LAINNYA
}

enum kyc_status_enum {
  PENDING
  REVIEWED
}

enum tipe_usaha_enum {
  MIKRO
  KECIL
  MENENGAH
  BESAR
}

enum transaction_status_enum {
  PENDING
  SUCCESS
  FAILED
}

enum transaction_type_enum {
  INVESTMENT
  REFUND
}

enum user_roles {
  USER
  FUNDRAISER
  ADMIN
}
