
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.14.0
 * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
 */
Prisma.prismaVersion = {
  client: "5.14.0",
  engine: "e9771e62de70f79a5e1c604a2d7c8e2a0a874b48"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AddressScalarFieldEnum = {
  address_id: 'address_id',
  address: 'address',
  kecamatan: 'kecamatan',
  kota: 'kota',
  provinsi: 'provinsi',
  kode_pos: 'kode_pos',
  kyc_level_1_id: 'kyc_level_1_id'
};

exports.Prisma.Alamat_usahaScalarFieldEnum = {
  alamat_usaha_id: 'alamat_usaha_id',
  campaign_id: 'campaign_id',
  address: 'address',
  kecamatan: 'kecamatan',
  kota: 'kota',
  provinsi: 'provinsi',
  kode_pos: 'kode_pos',
  lat: 'lat',
  lgn: 'lgn'
};

exports.Prisma.CampaignScalarFieldEnum = {
  campaign_id: 'campaign_id',
  user_id: 'user_id',
  nama_usaha: 'nama_usaha',
  deskripsi_usaha: 'deskripsi_usaha',
  logo: 'logo',
  isApproved: 'isApproved',
  isPublished: 'isPublished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tipe_usaha: 'tipe_usaha',
  jenis_usaha: 'jenis_usaha'
};

exports.Prisma.Campaign_updateScalarFieldEnum = {
  update_id: 'update_id',
  campaign_id: 'campaign_id',
  update_title: 'update_title',
  update_detail: 'update_detail',
  published_at: 'published_at'
};

exports.Prisma.CommunityScalarFieldEnum = {
  community_id: 'community_id',
  campaign_id: 'campaign_id'
};

exports.Prisma.Community_chatScalarFieldEnum = {
  chat_id: 'chat_id',
  community_proposal_id: 'community_proposal_id',
  chat: 'chat',
  user_id: 'user_id',
  created_at: 'created_at'
};

exports.Prisma.Community_membershipScalarFieldEnum = {
  community_membership_id: 'community_membership_id',
  community_id: 'community_id',
  user_id: 'user_id',
  joinedDate: 'joinedDate',
  exited_date: 'exited_date'
};

exports.Prisma.Community_proposalScalarFieldEnum = {
  proposal_com_id: 'proposal_com_id',
  setuju: 'setuju',
  tidak_setuju: 'tidak_setuju',
  abstain: 'abstain',
  title: 'title',
  deskripsi: 'deskripsi',
  file_tambahan: 'file_tambahan',
  amount: 'amount',
  community_id: 'community_id'
};

exports.Prisma.Contact_usahaScalarFieldEnum = {
  contact_id: 'contact_id',
  campaign_id: 'campaign_id',
  telepon_wa: 'telepon_wa',
  fax: 'fax',
  email: 'email',
  website: 'website'
};

exports.Prisma.CrowdfundingScalarFieldEnum = {
  crowdfunding_id: 'crowdfunding_id',
  campaign_id: 'campaign_id',
  target_raise: 'target_raise',
  equity_dijual: 'equity_dijual',
  start_date: 'start_date',
  end_date: 'end_date',
  fund_raised: 'fund_raised'
};

exports.Prisma.Data_rekeningScalarFieldEnum = {
  rekening_id: 'rekening_id',
  nama_rekening: 'nama_rekening',
  nama_bank: 'nama_bank',
  nomor_rekening: 'nomor_rekening',
  crowdfunding_id: 'crowdfunding_id'
};

exports.Prisma.DiscussionScalarFieldEnum = {
  discussion_id: 'discussion_id',
  campaign_id: 'campaign_id',
  user_id: 'user_id',
  createdAt: 'createdAt',
  lastActivity: 'lastActivity',
  message: 'message',
  like: 'like'
};

exports.Prisma.DocumentScalarFieldEnum = {
  document_id: 'document_id',
  campaign_id: 'campaign_id'
};

exports.Prisma.Document_legalScalarFieldEnum = {
  document_legal_id: 'document_legal_id',
  document_id: 'document_id',
  nama_dokumen: 'nama_dokumen',
  file: 'file'
};

exports.Prisma.Document_proposalScalarFieldEnum = {
  document_proposal_id: 'document_proposal_id',
  document_id: 'document_id',
  nama_dokumen: 'nama_dokumen',
  file: 'file'
};

exports.Prisma.Foto_dokumenScalarFieldEnum = {
  foto_dokumen_id: 'foto_dokumen_id',
  foto_ktp_depan: 'foto_ktp_depan',
  foto_ktp_belakang: 'foto_ktp_belakang',
  foto_selfie: 'foto_selfie',
  kyc_level_1_id: 'kyc_level_1_id'
};

exports.Prisma.Highlight_productScalarFieldEnum = {
  highlight_product_id: 'highlight_product_id',
  crowdfunding_id: 'crowdfunding_id',
  highlight: 'highlight'
};

exports.Prisma.InvestmentScalarFieldEnum = {
  investment_id: 'investment_id',
  campaign_id: 'campaign_id',
  user_id: 'user_id',
  amount: 'amount',
  investment_date: 'investment_date'
};

exports.Prisma.Kyc_level_1ScalarFieldEnum = {
  kyc_level_1_id: 'kyc_level_1_id',
  user_id: 'user_id',
  full_name: 'full_name',
  nik: 'nik',
  tanggal_lahir: 'tanggal_lahir',
  status: 'status',
  isAproved: 'isAproved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  statusUpdate: 'statusUpdate'
};

exports.Prisma.Kyc_level_2ScalarFieldEnum = {
  kyc_level_2_id: 'kyc_level_2_id',
  user_id: 'user_id',
  surat_skck: 'surat_skck',
  surat_domisili: 'surat_domisili',
  surat_keterangan_bank: 'surat_keterangan_bank',
  status: 'status',
  isApproved: 'isApproved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  updateStatus: 'updateStatus'
};

exports.Prisma.Legalitas_usahaScalarFieldEnum = {
  legalitas_id: 'legalitas_id',
  campaign_id: 'campaign_id',
  tanggal_dibentuk: 'tanggal_dibentuk',
  pemilik: 'pemilik',
  nib: 'nib',
  nik_pic: 'nik_pic',
  file_perizinan: 'file_perizinan'
};

exports.Prisma.Pesan_campaignScalarFieldEnum = {
  pesan_id: 'pesan_id',
  campaign_id: 'campaign_id',
  pesan: 'pesan',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.Product_informationScalarFieldEnum = {
  product_info_id: 'product_info_id',
  crowdfunding_id: 'crowdfunding_id',
  link_video: 'link_video',
  product_info: 'product_info'
};

exports.Prisma.RefundScalarFieldEnum = {
  refund_id: 'refund_id',
  amount: 'amount',
  nama_bank: 'nama_bank',
  nomor_bank: 'nomor_bank',
  alasan_refund: 'alasan_refund',
  isAproved: 'isAproved',
  statusUpdate: 'statusUpdate',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  user_id: 'user_id',
  isConfirmed: 'isConfirmed',
  approved_amount: 'approved_amount',
  reason_reduce: 'reason_reduce'
};

exports.Prisma.Replies_discussionScalarFieldEnum = {
  replie_id: 'replie_id',
  discussion_id: 'discussion_id',
  createdAt: 'createdAt',
  message: 'message',
  like: 'like'
};

exports.Prisma.Social_media_usahaScalarFieldEnum = {
  social_media_id: 'social_media_id',
  campaign_id: 'campaign_id',
  team_id: 'team_id',
  facebook: 'facebook',
  instagram: 'instagram',
  twitter: 'twitter',
  telegram: 'telegram',
  tiktok: 'tiktok',
  linkedin: 'linkedin'
};

exports.Prisma.Team_campaignScalarFieldEnum = {
  team_id: 'team_id',
  campaign_id: 'campaign_id',
  nama_lengkap: 'nama_lengkap',
  jabatan: 'jabatan'
};

exports.Prisma.TransactionScalarFieldEnum = {
  transaction_id: 'transaction_id',
  transaction_type: 'transaction_type',
  transaction_status: 'transaction_status',
  trans_date: 'trans_date',
  payment: 'payment',
  amount: 'amount',
  campaign_id: 'campaign_id',
  user_id: 'user_id'
};

exports.Prisma.UserScalarFieldEnum = {
  user_id: 'user_id',
  email: 'email',
  phone: 'phone',
  password: 'password',
  roles: 'roles',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.User_votedScalarFieldEnum = {
  user_voted_id: 'user_voted_id',
  community_proposal_id: 'community_proposal_id',
  user_id: 'user_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.tipe_usaha_enum = exports.$Enums.tipe_usaha_enum = {
  MIKRO: 'MIKRO',
  KECIL: 'KECIL',
  MENENGAH: 'MENENGAH',
  BESAR: 'BESAR'
};

exports.jenis_usaha_enum = exports.$Enums.jenis_usaha_enum = {
  PERTANIAN: 'PERTANIAN',
  PERDAGANGAN: 'PERDAGANGAN',
  JASA: 'JASA',
  INDUSTRI: 'INDUSTRI',
  MAKANAN: 'MAKANAN',
  MINUMAN: 'MINUMAN',
  TEKNOLOGI: 'TEKNOLOGI',
  KREATIF: 'KREATIF',
  LAINNYA: 'LAINNYA'
};

exports.kyc_status_enum = exports.$Enums.kyc_status_enum = {
  PENDING: 'PENDING',
  REVIEWED: 'REVIEWED'
};

exports.transaction_type_enum = exports.$Enums.transaction_type_enum = {
  INVESTMENT: 'INVESTMENT',
  REFUND: 'REFUND'
};

exports.transaction_status_enum = exports.$Enums.transaction_status_enum = {
  PENDING: 'PENDING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED'
};

exports.user_roles = exports.$Enums.user_roles = {
  USER: 'USER',
  FUNDRAISER: 'FUNDRAISER',
  ADMIN: 'ADMIN'
};

exports.Prisma.ModelName = {
  address: 'address',
  alamat_usaha: 'alamat_usaha',
  campaign: 'campaign',
  campaign_update: 'campaign_update',
  community: 'community',
  community_chat: 'community_chat',
  community_membership: 'community_membership',
  community_proposal: 'community_proposal',
  contact_usaha: 'contact_usaha',
  crowdfunding: 'crowdfunding',
  data_rekening: 'data_rekening',
  discussion: 'discussion',
  document: 'document',
  document_legal: 'document_legal',
  document_proposal: 'document_proposal',
  foto_dokumen: 'foto_dokumen',
  highlight_product: 'highlight_product',
  investment: 'investment',
  kyc_level_1: 'kyc_level_1',
  kyc_level_2: 'kyc_level_2',
  legalitas_usaha: 'legalitas_usaha',
  pesan_campaign: 'pesan_campaign',
  product_information: 'product_information',
  refund: 'refund',
  replies_discussion: 'replies_discussion',
  social_media_usaha: 'social_media_usaha',
  team_campaign: 'team_campaign',
  transaction: 'transaction',
  user: 'user',
  user_voted: 'user_voted'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
